@prefix ec:  <http://w3id.org/hefquin/engineconf#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

[]  a ec:HeFQUINEngineConfiguration ;
    ec:fedAccessMgr ec:MyFederationAccessManager ;
    ec:queryProcessor [
        ec:queryPlanner [
            ec:sourcePlanner ec:MySourcePlanner ;
            ec:logicalOptimizer ec:MyLogicalOptimizer ;
            ec:physicalOptimizer ec:MyPhysicalOptimizer
        ] ;
        ec:planCompiler ec:MyPlanCompiler ;
        ec:executionEngine ec:MyExecutionEngine ;
        ec:costModel ec:MyCostModel
   ] .

ec:MyFederationAccessManager rdf:type ec:FederationAccessManager ;
    ec:javaClassName "se.liu.ida.hefquin.federation.access.impl.FederationAccessManagerWithCache" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.federation.access.FederationAccessManager" ;
          ec:javaClassName "se.liu.ida.hefquin.federation.access.impl.AsyncFederationAccessManagerImpl" ;
          ec:constructorArguments ( ec:value:ExecServiceForFedAccess ) ]
        100  # cacheCapacity
    ) .

ec:MyCostModel rdf:type ec:CostModel ;
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.costmodel.CostModelImpl" ;
    ec:constructorArguments (
          [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.CardinalityEstimation" ;
            ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.cardinality.CardinalityEstimationImpl" ;
            ec:constructorArguments ( [rdf:value ec:value:QueryProcContext] )
          ]
    ) .

ec:MySourcePlanner rdf:type ec:SourcePlanner ;
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.srcsel.ServiceClauseBasedSourcePlannerImpl" ;
    ec:constructorArguments ( [rdf:value ec:value:QueryProcContext] ) .

ec:MyLogicalOptimizer rdf:type ec:LogicalOptimizer ;
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.HeuristicsBasedLogicalOptimizerImpl" ;
    ec:constructorArguments ( [rdf:value ec:value:QueryProcContext] _:bListOfHeuristics ) .

_:bListOfHeuristics
    ec:elementsTypeName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.HeuristicForLogicalOptimization" ;
    ec:elements (
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.MergeRequests" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.FilterPushDown" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.MergeRequests" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.GreedyBasedReordering" ;
          ec:constructorArguments (_:bFormulaForSelectivity) ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.ApplyVocabularyMappings" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.CardinalityBasedJoinOrderingWithRequests" ;
          ec:constructorArguments (ec:value:QueryProcContext) ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.RemoveUnnecessaryL2gAndG2l" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PullUpLtgOverUnion" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PullUpLtgOverJoin" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PushJoinUnderUnionWithRequests" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PullUpLtgOverUnion" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.RemovePairsOfG2lAndL2g" ]
    ) .

_:bFormulaForSelectivity
    ec:argumentTypeName
        "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.formula.FormulaForComputingSelectivity" ;
    ec:javaClassName
        "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.formula.JoinAwareWeightedUnboundVariableCount" .

ec:MyPhysicalOptimizer rdf:type ec:PhysicalOptimizer ;
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.PhysicalOptimizerWithoutOptimization" ;
    ec:constructorArguments (
          [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryplan.utils.LogicalToPhysicalPlanConverter" ;
            ec:javaClassName "se.liu.ida.hefquin.engine.queryplan.utils.LogicalToPhysicalPlanConverterImpl" ;
            ec:constructorArguments ( [rdf:value false]    # ignorePhysicalOpsForLogicalAddOps
                                      [rdf:value false] )  # ignoreParallelMultiLeftJoin
          ]
    ) .

ec:MyPlanCompiler rdf:type ec:PlanCompiler ;
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.compiler.QueryPlanCompilerForPushBasedExecution" ;
    ec:constructorArguments ( [rdf:value ec:value:QueryProcContext] ) .

ec:MyExecutionEngine rdf:type ec:ExecutionEngine ;
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.execution.ExecutionEngineImpl" ;
    ec:constructorArguments ( ) .
