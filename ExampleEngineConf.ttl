PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:   <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd:    <http://www.w3.org/2001/XMLSchema#>
PREFIX ec:     <http://w3id.org/hefquin/engineconf#>
PREFIX ex:     <http://example.org/>

[] rdf:type ec:HeFQUINEngineConfiguration ;
   ec:fedAccessMgr [
        ec:javaClassName "se.liu.ida.hefquin.engine.federation.access.impl.FederationAccessManagerWithCache" ;
        ec:constructorArguments (
            [ ec:argumentTypeName "se.liu.ida.hefquin.engine.federation.access.FederationAccessManager" ;
              ec:javaClassName "se.liu.ida.hefquin.engine.federation.access.impl.AsyncFederationAccessManagerImpl" ;
              ec:constructorArguments ( ec:value:ExecServiceForFedAccess )
            ]
            100  # cacheCapacity
        )
   ] ;
   ec:queryProcessor _:b1 .

_:b1 ec:queryPlanner _:b2 ;
     ec:planCompiler [
         ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.compiler.PushBasedQueryPlanCompilerImpl" ;
         ec:constructorArguments ( ec:value:QueryProcContext )
     ] ;
     ec:executionEngine [
         ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.execution.ExecutionEngineImpl" ;
         ec:constructorArguments ( )
     ] .

_:b2 ec:sourcePlanner
                _:bServiceBasedSrcPlanner ;
                #_:bExhaustiveSrcPlanner ;
     ec:logicalOptimizer [
         ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.HeuristicsBasedLogicalOptimizerImpl" ;
         ec:constructorArguments ( ec:value:QueryProcContext _:bListOfHeuristics )
     ] ;
     ec:physicalOptimizer
                _:bNoPhysOptimizer .
                #_:bCostBasedGreedyOptimizer .
                #_:bCardBasedGreedyOptimizer .
                #_:bDPBasedBushyOptimizer .
                #_:bDPBasedLinearOptimizer .
                #_:bRandomJoinPlanOptimizer .
                #_:bIterativeImprovementOptimizer .
                #_:bSimulatedAnnealingOptimizer .
                #_:bTwoPhaseOptimizer .
                #_:bEvolutionaryOptimizer .

_:bListOfHeuristics
    ec:elementsTypeName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.HeuristicForLogicalOptimization" ;
    ec:elements (
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.MergeRequests" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.FilterPushDown" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.MergeRequests" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.GreedyBasedReordering" ;
          ec:constructorArguments (_:bFormulaForSelectivity) ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.ApplyVocabularyMappings" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.CardinalityBasedJoinOrderingWithRequests" ;
          ec:constructorArguments (ec:value:QueryProcContext) ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.RemoveUnnecessaryL2gAndG2l" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PullUpLtgOverUnion" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PullUpLtgOverJoin" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PushJoinUnderUnionWithRequests" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.PullUpLtgOverUnion" ]
        [ ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.RemovePairsOfG2lAndL2g" ]
    ) .
    
_:bFormulaForSelectivity
    ec:argumentTypeName
        "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.formula.FormulaForComputingSelectivity" ;
    ec:javaClassName
        #"se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.formula.JoinAwareWeightedUnboundVariableCount" .
        "se.liu.ida.hefquin.engine.queryproc.impl.loptimizer.heuristics.formula.FmAwareWeightedJoinAndUnboundVariableCount" .

_:bServiceBasedSrcPlanner
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.srcsel.ServiceClauseBasedSourcePlannerImpl" ;
    ec:constructorArguments ( ec:value:QueryProcContext ) .

_:bExhaustiveSrcPlanner
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.srcsel.ExhaustiveSourcePlannerImpl" ;
    ec:constructorArguments ( ec:value:QueryProcContext ) .

_:bArgL2PConverter
    ec:argumentTypeName "se.liu.ida.hefquin.engine.queryplan.utils.LogicalToPhysicalPlanConverter" ;
    ec:javaClassName    "se.liu.ida.hefquin.engine.queryplan.utils.LogicalToPhysicalPlanConverterImpl" ;
    ec:constructorArguments ( false      # ignorePhysicalOpsForLogicalAddOps
                              false ) .  # ignoreParallelMultiLeftJoin
_:bNoPhysOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.PhysicalOptimizerWithoutOptimization" ;
    ec:constructorArguments ( _:bArgL2PConverter ) .

_:bCostBasedGreedyOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.SimpleJoinOrderingQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.JoinPlanOptimizer" ;
          ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.CostModelBasedGreedyJoinPlanOptimizerImpl" ;
          ec:constructorArguments ( ec:value:CostModel )
        ]
        _:bArgL2PConverter
    ) .

_:bCardBasedGreedyOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.SimpleJoinOrderingQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.JoinPlanOptimizer" ;
          ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.CardinalityBasedGreedyJoinPlanOptimizerImpl" ;
          ec:constructorArguments ( ec:value:QueryProcContext )
        ]
        _:bArgL2PConverter
    ) .

_:bDPBasedBushyOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.SimpleJoinOrderingQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.JoinPlanOptimizer" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.DPBasedBushyJoinPlanOptimizer" ;
          ec:constructorArguments ( ec:value:CostModel )
        ]
        _:bArgL2PConverter
    ) .

_:bDPBasedLinearOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.SimpleJoinOrderingQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.JoinPlanOptimizer" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.DPBasedLinearJoinPlanOptimizer" ;
          ec:constructorArguments ( ec:value:CostModel )
        ]
        _:bArgL2PConverter
    ) .

_:bRandomJoinPlanOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.SimpleJoinOrderingQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.JoinPlanOptimizer" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.simple.RandomizedJoinPlanOptimizerImpl" ;
          ec:constructorArguments ( )
        ]
        _:bArgL2PConverter
    ) .

_:bIterativeImprovementOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.IterativeImprovementBasedQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.StoppingConditionForIterativeImprovement" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.StoppingConditionByNumberOfGenerations" ;
          ec:constructorArguments ( 5 )  # generationThreshold
        ]
        _:bArgL2PConverter
        ec:value:CostModel
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.rewriting.RuleInstances" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.rewriting.RuleInstances" ;
          ec:constructorArguments ( )
        ]
    ) .

_:bSimulatedAnnealingOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.SimulatedAnnealing" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.EquilibriumConditionForSimulatedAnnealing" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.EquilibriumConditionByRelativeSubplanCount" ;
          ec:constructorArguments ( 16 )  # scalingFactor
        ]
        _:bArgL2PConverter
        ec:value:CostModel
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.rewriting.RuleInstances" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.rewriting.RuleInstances" ;
          ec:constructorArguments ( )
        ]
    ) .

_:bTwoPhaseOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.TwoPhaseQueryOptimizer" ;
    ec:constructorArguments (
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.StoppingConditionForIterativeImprovement" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.StoppingConditionByNumberOfGenerations" ;
          ec:constructorArguments ( 5 )  # generationThreshold
        ]
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.EquilibriumConditionForSimulatedAnnealing" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.randomized.EquilibriumConditionByRelativeSubplanCount" ;
          ec:constructorArguments ( 16 )  # scalingFactor
        ]
        _:bArgL2PConverter
        ec:value:CostModel
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.rewriting.RuleInstances" ;
          ec:javaClassName    "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.rewriting.RuleInstances" ;
          ec:constructorArguments ( )
        ]
    ) .

_:bEvolutionaryOptimizer
    ec:javaClassName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.evolutionaryAlgorithm.EvolutionaryAlgorithmQueryOptimizer" ;
    ec:constructorArguments (
        _:bArgL2PConverter
        ec:value:CostModel
        ec:value:QueryProcContext
        8   # nmCandidates
        2   # nmSurvivors
        [ ec:argumentTypeName "se.liu.ida.hefquin.engine.queryproc.impl.poptimizer.evolutionaryAlgorithm.TerminationCriterionFactory" ;
          ec:javaClassName    "TODO - The various TerminationCriterionFactory classes need to be made explicit so that they have constructors." ;
          ec:constructorArguments ( )
        ]
    ) .
