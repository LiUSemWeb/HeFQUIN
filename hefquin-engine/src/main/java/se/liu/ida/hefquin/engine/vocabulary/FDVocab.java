package se.liu.ida.hefquin.engine.vocabulary;

/* CVS $Id: $ */
 
import org.apache.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from feddesc.ttl 
 * @author Auto-generated by schemagen on 16 May 2025 21:04 
 */
public class FDVocab {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static final Model M_MODEL = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://w3id.org/hefquin/feddesc#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     * @return namespace as String
     * @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = M_MODEL.createResource( NS );
    
    /** <p>The network address (URI) of the endpoint of the federation member.</p> */
    public static final Property endpointAddress = M_MODEL.createProperty( "http://w3id.org/hefquin/feddesc#endpointAddress" );
    
    /** <p>An example URL of a fragment for pattern fragment interfaces.</p> */
    public static final Property exampleFragmentAddress = M_MODEL.createProperty( "http://w3id.org/hefquin/feddesc#exampleFragmentAddress" );
    
    /** <p>The interface description for accessing the federation member.</p> */
    public static final Property interface_ = M_MODEL.createProperty( "http://w3id.org/hefquin/feddesc#interface" );
    
    /** <p>Mapping configuration for translating non-RDF data models to RDF (e.g., GraphQL, 
     *  LPG).</p>
     */
    public static final Property mappingConfiguration = M_MODEL.createProperty( "http://w3id.org/hefquin/feddesc#mappingConfiguration" );
    
    /** <p>Path to a file with RDF mappings to align different vocabularies.</p> */
    public static final Property vocabularyMappingsFile = M_MODEL.createProperty( "http://w3id.org/hefquin/feddesc#vocabularyMappingsFile" );
    
    /** <p>An interface to access a federation member using the Bolt protocol (e.g., 
     *  for Neo4j).</p>
     */
    public static final Resource BoltInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#BoltInterface" );
    
    /** <p>An endpoint interface is the general superclass for all types of interfaces 
     *  through which a federation member can be queried using a single endpoint, 
     *  including SPARQL interfaces. It should not be instantiated directly in federation 
     *  descriptions, instead, concrete subclasses should be used to specify the type 
     *  of interface.</p>
     */
    public static final Resource EndpointInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#EndpointInterface" );
    
    /** <p>An entity that is part of the federation and provides data via a specific 
     *  interface.</p>
     */
    public static final Resource FederationMember = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#FederationMember" );
    
    /** <p>A fragment interface is an interface to request a fragment (i.e., a specific 
     *  subset) of the dataset of a federation member. This class is a superclass 
     *  of any kind of fragment interface and should not be used directly within federation 
     *  descriptions. Concrete types of fragment interfaces, to be used in federation 
     *  descriptions, are captured by the subclasses of this class.</p>
     */
    public static final Resource FragmentInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#FragmentInterface" );
    
    /** <p>An interface to access a federation member via a GraphQL API.</p> */
    public static final Resource GraphQLEndpointInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#GraphQLEndpointInterface" );
    
    /** <p>An interface is the general superclass for all types of interfaces through 
     *  which a federation member can be queried, including SPARQL interfaces, and 
     *  fragment interfaces. It should not be instantiated directly in federation 
     *  descriptions, instead, concrete subclasses should be used to specify the type 
     *  of interface.</p>
     */
    public static final Resource Interface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#Interface" );
    
    /** <p>An interface to access a federation member via the SPARQL protocol.</p> */
    public static final Resource SPARQLEndpointInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#SPARQLEndpointInterface" );
    
    /** <p>An interface to access a federation member via Triple Pattern Fragments.</p> */
    public static final Resource TPFInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#TPFInterface" );
    
    /** <p>An interface to access a federation member via Bindings-Restricted Triple 
     *  Pattern Fragments.</p>
     */
    public static final Resource brTPFInterface = M_MODEL.createResource( "http://w3id.org/hefquin/feddesc#brTPFInterface" );
    
}
